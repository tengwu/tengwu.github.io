<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>C&#43;&#43; on me</title>
    <link>http://tengwu.quest/categories/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on me</description>
    <image>
      <title>me</title>
      <url>http://tengwu.quest/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>http://tengwu.quest/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 03 Apr 2023 20:21:00 +0800</lastBuildDate><atom:link href="http://tengwu.quest/categories/c++/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C&#43;&#43;拾遗</title>
      <link>http://tengwu.quest/post/2023/04/cpp-supplements/</link>
      <pubDate>Mon, 03 Apr 2023 20:21:00 +0800</pubDate>
      
      <guid>http://tengwu.quest/post/2023/04/cpp-supplements/</guid>
      <description>动机 最近在尝试使用 LLVM 写一个编译器,但是发现工作期间学习的C++语法都差不多忘光光了,所以就想抽空把C++语法复习一下,顺便学习一下最新出的C++20和23.
本篇文章会陆续更新,基本原则是,在写代码的过程中,看到什么语法,再学习,更新它.
C++11 C++11是C++的第二个主要版本,第一个主要版本是C++98.从C++11开始,每三年会出一版新的C++标准.
根据cppreference,C++11合并了一些开源库的特性:
From TR1: all of TR1 except Special Functions. From Boost: The thread library, exception_ptr, error_code and error_condition, iterator improvements (begin, end, next, prev) From C: C-style Unicode conversion functions 更具体的特性列表请查看 cppreference, 这篇博客只列出了在之后可能会经常用到的特性.
auto和decltype auto 让编译器根据初始化表达式的类型来推断所定义变量的类型,它推断的变量类型必须在编译时确定,不能用于动态类型或运行时类型推断.
decltype 用于获取表达式的类型,不会执行该表达式.它可以帮助程序员编写更灵活的代码,避免手动指定类型,同事保持类型安全.
我目前很少看到 decltype 的使用,具体怎么用,有什么需要注意的,看到再说吧.
rvalue references &amp;amp; move 右值引用和 move 语义.
参考这篇博客.
总而言之, vector 使用 push_back 可以避免深拷贝,提升性能.至于为什么,请详读上面这篇博客.
另外, vector 等容器或者一些C++函数实现了 move 语义,即在使用 move 之后,原始变量中的一些值被移走,这么说比较抽象,可以看一段示例代码:
#include &amp;lt;iostream&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;vector&amp;gt; using namespace std; int main() { int a = 5; vector&amp;lt;int&amp;gt; v; v.</description>
    </item>
    
  </channel>
</rss>
